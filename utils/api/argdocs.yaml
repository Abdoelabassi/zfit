minimizer.verbosity: |1+
 Verbosity of the minimizer.
                 A value above 5 starts printing more
                 output with a value of 10 printing every
                 evaluation of the loss function and gradient.
minimizer.tol: |1+
    Termination value for the
                    convergence/stopping criterion of the algorithm
                    in order to determine if the minimum has
                    been found. Defaults to 1e-3.
minimizer.criterion: |1+
    Criterion of the minimum. This is an
                    estimated measure for the distance to the
                    minimum and can include the relative
                    or absolute changes of the parameters,
                    function value, gradients and more.
                    If the value of the criterion is smaller
                    than ``loss.errordef * tol``, the algorithm
                    stopps and it is assumed that the minimum
                    has been found.
minimizer.strategy: |1+
    Determines the behavior of the minimizer in
                    certain situations, most notably when encountering
                    NaNs in which case
minimizer.maxiter: |1+
    Approximate number of iterations.
                    This corresponds to roughly the maximum number of
                    evaluations of the `value`, 'gradient` or `hessian`.
minimizer.name: |1+
    Human readable name of the minimizer.
minimizer.maxcor: |1+
    Maximum number of memory history to keep
                    when using a quasi-Newton update formula such as BFGS.
                    It is the number of gradients
                    to “remember” from previous optimization
                    steps: increasing it increases
                    the memory requirements but may speed up the convergence.
minimizer.init.maxls: |1+
    Maximum number of linesearch points.

minimizer.scipy.gradient: |1+
    Define the method to use for the gradient computation
                    that the minimizer should use.
                    If it is set to False
minimizer.scipy.hessian: |1+
    Maximum number of linesearch points.


minimizer.nlopt.population: |1+
    The population size for the evolutionary algorithm.
minimizer.nlopt.info: |1+
    This implenemtation is based on the
         `NLopt <https://nlopt.readthedocs.io/en/latest/>`_.
         More information on the algorithm can be found
         `here <https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/>`_
         `NLopt <https://nlopt.readthedocs.io/en/latest/>`_ is a
         free/open-source library for nonlinear optimization,
         providing a common interface for a number of
         different free optimization routines available online as well as
         original implementations of various other algorithms.


result.init.loss: |1+
    The loss function that was minimized.
                Usually, but not necessary, contains
                also the pdf, data and constraints.
result.init.params: |1+
    Result of the fit where each
                :py:class:`~zfit.Parameter` key has the
                value from the minimum found by the minimizer.

result.init.minimizer: |1+
    Minimizer that was used to obtain this `FitResult` and will be used to
                    calculate certain errors. If the minimizer
                    is state-based (like "iminuit"), then this is a copy
                    and the state of other `FitResults` or of the *actual*
                    minimizer that performed the minimization
                    won't be altered.
result.init.valid: |1+
    Indicating whether the result is valid or not. This is the strongest
                    indication and serves as
                    the global flag. The reasons why a result may be
                    invalid can be arbitrary, including but not exclusive:
                    - parameter(s) at the limit
                    - maxiter reached without proper convergence
                    - the minimizer may even converged but it is known that this is only a local minimum

                    To indicate the reason for the invalidity, pass a message.
result.init.edm: |1+
    The estimated distance to minimum
                    which is the criterion value at the minimum.
result.init.fmin: |1+
    Value of the function at the minimum.
result.init.criterion: |1+
    Criterion that was used during the minimization.
                    This determines the estimated distance to the
                    minimum (edm)
result.init.status: |1+
    A status code (if available) that describes
                    the minimization termination. 0 means a valid
                    termination.
result.init.converged: |1+
    Whether the fit has successfully converged or not.
                    The result itself can still be an invalid minimum
                    such as if the parameters are at or close
                    to the limits or in case another minimum is found.
result.init.message: |1+
    Human readable message to indicate the reason
                    if the fitresult is not valid.
                    If the fit is valid, the message (should)
                    be an empty string (or None),
                    otherwise it should denote the reason for the invalidity.
result.init.info: |1+
    Additional information (if available)
                    such as *number of gradient function calls* or the
                    original minimizer return message.
                    This is a relatively free field and _no single field_
                    in it is guaranteed to be stable.
                    Some recommended fields:
                    - *original*: contains the original returned object
                      by the minimizer used internally.
                    - *optimizer*: the actual instance of the wrapped
                      optimizer (if available)
result.init.approx: |1+
    Collection of approximations found during
                    the minimization process such as gradient and hessian.
result.init.niter: |1+
    Approximate number of iterations ~= number
                    of function evaluations ~= number of gradient evaluations.
                    This is an approximated value and the exact meaning
                    can differ between different minimizers.
result.init.evaluator: |1+
    Loss evaluator that was used during the
                    minimization and that may contains information
                    about the last evaluations of the gradient
                    etc which can serve as approximations.

result.init.values: |1+
    Values of the parameters at the
                    found minimum.
